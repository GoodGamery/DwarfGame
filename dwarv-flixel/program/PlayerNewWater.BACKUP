package
{
	import flash.display.BitmapData;
	import flash.geom.Point;
	import flash.geom.Rectangle;
	import org.flixel.*;
	import Particles.Splash;
	import Hud.Grunt;
	

	public class Player extends FlxSprite
	{
		public var bow:FlxSprite = null;
		public var parent:PlayState = null;
		public var text:FlxText = null
		
		public var nBubbliness:Number = 0;
		public var bBearings:Boolean = false;
		
		public var nWaterBoostLateral:Number = 1;
		public var nWaterBoostVertical:Number = 1;
		
		public var nWaterBoostLateralCap:Number = 1.4;
		public var nWaterBoostVerticalCap:Number = 1.7;
		
		public var nWaterBoostLateralSpurt:Number = 0.6;
		public var nWaterBoostVerticalSpurt:Number = 0.8;
		
		public var nWaterBoostLateralDecay:Number = (nWaterBoostLateralCap - 1) * 0.3; // seconds
		public var nWaterBoostVerticalDecay:Number = (nWaterBoostVerticalCap - 1) * 0.3; // seconds
		
		
		public function Player(p:PlayState, X:Number, Y:Number, spriteBow:FlxSprite )
		{	
			parent = p;
			
			super(X, Y);
			
			loadGraphic(Content.cHero, true, true, 100, 100);
			
			bow = spriteBow;
			
			facing = LEFT;
			
		
			maxVelocity.x = 150;			//walking speed
			maxVelocity.y = 800;
			//velocity.x = 300;
			//acceleration.x = 200;
			acceleration.y = Content.nGrav;			//gravity
			drag.x = maxVelocity.x * 300;		//deceleration (sliding to a stop)
			

			//tweak the bounding box for better feel
			width = Content.herohitwidth;
			height = Content.herohitheight;
			offset.x = Content.herohitoffsetx;
			offset.y = Content.herohitoffsety;
			
			bow.width = Content.herohitwidth;
			bow.height = Content.herohitheight;
			bow.offset.x = Content.herohitoffsetx;
			bow.offset.y = Content.herohitoffsety;
					
			addAnimation("stand", [0], 1, false);
			addAnimation("standup", [18], 1, false);
			addAnimation("standdn", [36], 1, false);
			
			addAnimation("run", [9, 10, 11, 12, 13, 14, 15, 16], 14, true);
			addAnimation("runup", [27, 28, 29, 30, 31, 32, 33, 34], 14, true);
			addAnimation("rundn", [45, 46, 47, 48, 49, 50, 51, 52], 14, true);
			
			addAnimation("jump", [55], 1, false);
			addAnimation("jumpup", [57], 1, false);
			addAnimation("jumpdn", [59], 1, false);
			
			addAnimation("fall", [56], 1, false);
			addAnimation("fallup", [58], 1, false);
			addAnimation("falldn", [60], 1, false);
			
			addAnimation("struck", [54], 1, false);
			
			addAnimation("swim", [1, 2, 3, 4, 5, 4, 3, 2], 8, true);
			addAnimation("fswim", [1, 2, 3, 4, 5, 4, 3, 2], 18, true);
			addAnimation("fswimup", [19, 20, 21, 22, 23, 22, 21, 20], 18, true);
			addAnimation("fswimdn", [37, 38, 39, 40, 41, 40, 39, 38], 18, true);
			
			addAnimation("leaving", [72, 73, 74, 75, 76, 77, 78, 79, 80, 80, 80, 80, 80, 80, 80], 10, false);
			addAnimation("arriving", [81, 82, 83, 84, 85, 86, 87, 88, 88], 10, false);
			
			//addAnimation("crouch", [22, 22], 3, true);
			
			play("arriving");
			
			
			//boundGraphic(100, 100, 8, 8);
			
			
		}

		public const nRecoverySeconds:Number = 2;
		public const iOuchPower:int = 200;
		public function Hit(iDamage:int, iCulpritMidpointX:int):void
		{
			trace("Hit for " + iDamage.toString() + " dmg");
			Content.stats.iHealth -= iDamage;
			parent.hud.UpdateHearts();
			
				
			this.flicker(nRecoverySeconds);
			bow.flicker(nRecoverySeconds);
			acceleration.x = 0;
			
			if(fluid == 0)
				velocity.y = -Content.nGrav * 0.25;
			
			if (this.x + (this.width / 2) > iCulpritMidpointX)
			{
				if (this.velocity.x < iOuchPower)
				{
					this.velocity.x = iOuchPower;
				}
				
				this.facing = LEFT;
			}
			else
			{
				if (this.velocity.x > -iOuchPower) 
				{
				
					this.velocity.x = -iOuchPower;
				}
				
				this.facing = RIGHT;
			}
			
			play("struck");
			
			if (Content.stats.iHealth <= 0)
			{
				parent.state = Content.DEAD;
				parent.iDeadState = Content.JUSTDIED;				
			}
			else
			{
				FlxG.play(Content.soundHurt, Content.volumeHurt, false, false);
			}
		}
		
		public var bJumpRecharged:Boolean = true;
		public var bJumpCanBeCut:Boolean = false;
		public var bShootRecharged:Boolean = true;
		public var bShock:Boolean = false;
		public var overtile:int = -1;
		public var iLastOvertile:int = -1;
		public var fluid:int = -1;
		public var iLastFluid:int = -1;
		public var bDiveButton:Boolean = false;
		public var bJumpButton:Boolean = false;
		public var bShootButton:Boolean = false;
		public var bTossButton:Boolean = false;
		public var bUpButton:Boolean = false;
		public var bDownButton:Boolean = false;
		public var bLeftButton:Boolean = false;
		public var bRightButton:Boolean = false;
		public var bShooting:Boolean = false;
		override public function update():void
		{
			this._bDangerFlicker = false;
			bow._bDangerFlicker = false;
			
			if (parent.state == Content.LEAVING || parent.state == Content.DEAD)
			{
				return;
			}
				
			if (Content.stats.iHealth <= Content.stats.iMaxHealth / 3 && 
				parent.hero.GetCurrentAnim() != "leaving" &&
				parent.hero.GetCurrentAnim() != "arriving")
			{
				this._bDangerFlicker = true;
				bow._bDangerFlicker = true;
			}
				
			bDiveButton = FlxG.keys.pressed("DOWN");
			bJumpButton = FlxG.keys.pressed("X") || FlxG.keys.pressed("SPACE");
			bShootButton = FlxG.keys.pressed("Z") || FlxG.keys.pressed("B");
			bTossButton = FlxG.keys.pressed("A") || FlxG.keys.pressed("B");
			bUpButton = FlxG.keys.pressed("UP");
			bDownButton = FlxG.keys.pressed("DOWN");
			bLeftButton = FlxG.keys.pressed("LEFT");
			bRightButton = FlxG.keys.pressed("RIGHT");
			bShooting = false;
			
			if (bShootButton && bShootRecharged)
				bShooting = true;
			
			if (!bDiveButton && !bJumpButton && !bShootButton && !bTossButton && !bUpButton && !bDownButton &&
				this.GetCurrentAnim() == "arriving")
			{
				parent.spotlight.visible = false;
				
				if (this.GetCurrentFrame() == 8)
				{
					this.play("stand");
				}
				
				return;
			}
			
			bow.visible = true;
			
			nBubbliness -= 0.005;
			if (nBubbliness < 0)
				nBubbliness = 0;
			
			var strQual:String = "";
			
			if (bUpButton)
				strQual = "up";
			else if (bDownButton)
				strQual = "dn";
			
			//parent.debugtext.text = (this.y % 30).toString();

			var bReallyInWater:Boolean = false;
			
			iLastFluid = fluid;
			iLastOvertile = overtile;
			if (parent != null && parent.level != null)
			{
				var xcheck:int = int(this.x + (this.width / 2)) / 30;
				var ycheck:int = int(this.y + (this.height / 2)) / 30;
				
				overtile = parent.level.getTile(xcheck, ycheck) % Content.iFrontSheetWidth;
				var below:int = parent.level.getTile(xcheck, ycheck + 1) % Content.iFrontSheetWidth;
			
	
				if (overtile == Content.iWater || overtile == Content.iWaterGrass || overtile == Content.iWaterSpikes)
					fluid = 2;
				else if (overtile == Content.iShallow || overtile == Content.iShallowGrass || overtile == Content.iShallowSpikes)
					fluid = 1;
				else
					fluid = 0;
				
				//if (fluid == 1 && this.y % 30 > 3)
				//	fluid = 2;
	
				var really:int = parent.level.getTile(int(this.x / 30), int(this.y / 30)) % Content.iFrontSheetWidth;
				bReallyInWater = (really == Content.iWater || really == Content.iWaterGrass || really == Content.iWaterSpikes ||
									really == Content.iShallow || really == Content.iShallowGrass || really == Content.iShallowSpikes);
				
				//parent.debugtext.text = (really).toString() + " " + bReallyInWater.toString();
			}
			
			if (iLastFluid == 0 && fluid > 0 && velocity.y > 0)
				velocity.y *= 0.5;
			
			if (iLastFluid == 0 && fluid == 1)
			{
				if (facing == LEFT)
					parent.groupParticles.add(new Splash(parent, this.x - 8, (ycheck - 1) * 30));
				else
					parent.groupParticles.add(new Splash(parent, this.x - 4, (ycheck - 1) * 30));
				
				FlxG.play(Content.soundSplash, Content.volumeSplash, false, false, Content.nDefaultSkip);
				
				nBubbliness = 1;
			}
			
			if (overtile == 1 ||
				(overtile >= Content.iStuffAboveStuffBelow && overtile <= Content.iEmptyAboveWaterBelow))
				{
					parent.spotlight.visible = true;
				}
				else
					parent.spotlight.visible = false;
				
			if (!bJumpButton)
			{
				bJumpRecharged = true;
			}
			
			if (iLastFluid == 2 && fluid == 1)
				bJumpRecharged = true;
			//else if (iLastFluid == 0 && fluid == 1)
			//	bJumpRecharged = false;
				
			
			var bInAir:Boolean = false;
			var bHasPogo:Boolean = false;
			
			if (fluid == 0)
			{
				nWaterBoostLateral = 1;
				nWaterBoostVertical = 1;
			}
			else
			{
				if (nWaterBoostLateral > 1)
				{
					nWaterBoostLateral -= nWaterBoostLateralDecay * FlxG.elapsed;
					
					if (nWaterBoostLateral < 1)
						nWaterBoostLateral = 1;
				}
				
				if (nWaterBoostVertical > 1)
				{
					nWaterBoostVertical -= nWaterBoostVerticalDecay * FlxG.elapsed;
					
					if (nWaterBoostVertical < 1)
						nWaterBoostVertical = 1;
				}
			}
			
			if (this._flickerTimer > nRecoverySeconds * 0.75)
			{
				drag.x = 0;
				bShock = true;
			}
			else
			{
				if (bShock)
				{
					bShock = false;
					drag.x = maxVelocity.x;
				}
				
				acceleration.y = Content.nGrav;
				
				drag.x = maxVelocity.x * 300;
				drag.y = maxVelocity.y * 300;
				
				if(isTouching(FLOOR) && fluid == 0)
				{
					bInAir = false;
				}
				else if (fluid > 0 && bReallyInWater)
				{
					if (fluid > 1)
					{
						/*
						if (bShootButton && bShootRecharged)
						{
							if ((!bLeftButton && !bUpButton && !bDownButton && facing == LEFT) || (bLeftButton && !bRightButton))
							{
								bLeftButton = false;
								bRightButton = true;
							}
							else if ((!bRightButton && !bUpButton && !bDownButton && facing == RIGHT) || (!bLeftButton && bRightButton))
							{
								bLeftButton = false;
								bRightButton = true;
							}
							else if (bDownButton || velocity.y > 0)
							{
								bDownButton = false;
								bUpButton = true;
							}
							else if (bUpButton || bJumpButton || velocity.y < 0)
							{
								bUpButton = false
								bUpButton = false;
								bDownButton = true;
							}
						}
						*/
					}
					
					drag.x = 40;
					drag.y = 40;
					
					//if(nWaterBoostLateral == 1)
						acceleration.x = 0;
						
					//if(nWaterBoostVertical == 1)
						acceleration.y = 0;

					if (!bShooting)
					{
						if (bLeftButton && !bRightButton)
						{
							facing = LEFT;

							acceleration.x = -Content.nGrav * Content.stats.nSwimLateralAcceleration;
						}
						else if (!bLeftButton && bRightButton)
						{
							facing = RIGHT;

							acceleration.x = Content.nGrav * Content.stats.nSwimLateralAcceleration;
						}
					}
					else if(bShooting && !bUpButton && !bDiveButton)
					{
						if ((bLeftButton && !bRightButton) || (!bLeftButton && !bRightButton && facing == LEFT))
						{
							facing = LEFT;

							if (velocity.x < 0)
								velocity.x = 0;
								
							//acceleration.x = Content.nGrav * Content.stats.nSwimLateralAcceleration * nWaterBoostLateralSpurt;
							
							nWaterBoostLateral = nWaterBoostLateralCap;
							velocity.x += Content.stats.nSwimLateralSpeed * nWaterBoostLateralSpurt;
						}
						else if ((!bLeftButton && bRightButton) || (!bLeftButton && !bRightButton && facing == RIGHT))
						{
							facing = RIGHT;

							if (velocity.x > 0)
								velocity.x = 0;
							
							//acceleration.x = -Content.nGrav * Content.stats.nSwimLateralAcceleration * nWaterBoostLateralSpurt;;
							
							nWaterBoostLateral = nWaterBoostLateralCap;
							velocity.x += -Content.stats.nSwimLateralSpeed * nWaterBoostLateralSpurt;
						}
					}

					if (velocity.x < -Content.stats.nSwimLateralSpeed * nWaterBoostLateral)
					{
						velocity.x = -Content.stats.nSwimLateralSpeed * nWaterBoostLateral;
					}
					else if (velocity.x > Content.stats.nSwimLateralSpeed * nWaterBoostLateral)
					{
						velocity.x = Content.stats.nSwimLateralSpeed * nWaterBoostLateral;
					}
			
					if (fluid == 1 && velocity.y <= 0 && int(this.y) % 30 <= 2 && bJumpButton != true)
					{
						nWaterBoostVertical = 1;
						velocity.y = 0;
						this.y = this.y - (this.y % 30);
					}
					else
					{
						if (bShooting && bDiveButton)
						{
							if (velocity.y > 0)
								velocity.y = 0;
								
							//acceleration.y = -Content.nGrav * Content.stats.nSwimUpAcceleration * nWaterBoostVerticalSpurt;
							nWaterBoostVertical = nWaterBoostVerticalCap;
							velocity.y += -Content.stats.nSwimUpSpeed * nWaterBoostVerticalSpurt;
						}
						else //  if (nWaterBoostVertical == 1)
							acceleration.y = -Content.nGrav * Content.stats.nSwimUpAcceleration;
					}
					
					if (!bShooting && bDiveButton)// && nWaterBoostVertical == 1)
					{
						acceleration.y = Content.nGrav * Content.stats.nSwimDownAcceleration;
					}
					else if (bShooting && bUpButton)
					{
						//if (velocity.y < 0)
						//	velocity.y = 0;
								
						//acceleration.y = Content.nGrav * Content.stats.nSwimDownAcceleration * nWaterBoostVerticalSpurt;
						nWaterBoostVertical = nWaterBoostVerticalCap;
						velocity.y += Content.stats.nSwimDownSpeed * nWaterBoostVerticalSpurt;
					}
					
					if (velocity.y < -Content.stats.nSwimUpSpeed * nWaterBoostVertical)
					{
						velocity.y = -Content.stats.nSwimUpSpeed * nWaterBoostVertical;
					}
					else if (velocity.y > Content.stats.nSwimDownSpeed * nWaterBoostVertical)
					{
						velocity.y = Content.stats.nSwimDownSpeed * nWaterBoostVertical;
					}
					
				}
				
				if (isTouching(FLOOR) || fluid == 1) // > 0
				{
					//Jump controls
					if (bJumpButton && bJumpRecharged
						//&&	!(bDownButton))
						)
					{
						Jump();
					}
				}
				else if(fluid == 0)
				{
					bInAir = true;
					
					if (bJumpCanBeCut && !bJumpButton && velocity.y < 0)
					{
						var perc:Number = velocity.y / ( -Content.nGrav * Content.stats.nPlayerJumpForce);
						perc = 1 - perc;
						perc *= 0.7;
						
						velocity.y = velocity.y * (0.3 + perc);
						bJumpCanBeCut = false;
					}
				}
				
				if (fluid > 0)
				{
					var remframe:int = this._curFrame;
					
					if (bLeftButton || bRightButton || bDownButton || bUpButton)
					{
						play("fswim"+strQual, false);
					}
					else
						play("swim", false);
				}
				else if (bInAir == true)
				{
					if (velocity.y < 0)
					{
						play("jump" + strQual);
					}
					else
					{
						play("fall" + strQual);
					}
				}
				else 
				{
					
					if(acceleration.x == 0)
					{
						play("stand" + strQual);
					}
					else
					{
						play("run" + strQual);
					}
					
				}/*
				else if (_curFrame == 1)
				{
					if(bUpButton)
						play("stand" + strQual);
				}*/
				
				
				var xoff:int = 0;
				var yoff:int = 0;
				
				if (bLeftButton || bRightButton)
				{
					bBearings = true;
				}
				
				if (fluid == 0)
				{
					acceleration.x = 0;
					
					if (bLeftButton && !bRightButton)
					{
						facing = LEFT;

						acceleration.x = -1000000;
					}
					else if (!bLeftButton && bRightButton)
					{
						facing = RIGHT;

						acceleration.x = 1000000;
					}
				}
				
				
					
				
				var anim:String = GetCurrentAnim();
				var iDir:int = 0;
				if (anim.charAt(anim.length - 2) + anim.charAt(anim.length - 1) == "up")
				{
					iDir = -1;
				}
				else if (anim.charAt(anim.length - 2) + anim.charAt(anim.length - 1) == "dn")
				{
					iDir = 1;
				}
				
				var shotted:Boolean = bow.GetCurrentAnim().substr(0, 5) == "shoot";

				if((shotted && bow.GetCurrentFrame() == 3) || !shotted)
				{
					if (iDir == -1)
						bow.play("restup");
					else if (iDir == 1)
						bow.play("restdn");
					else
						bow.play("rest");
				}
				
				
				/*
				if (bTossButton && bShootRecharged && bInAir == false)
				{
					bShootRecharged = false;
					play("crouch", true);
					
					xoff = 14;
					
					if (facing == LEFT)
						xoff = 7;
					
					yoff = 15;
					
					parent.arrayPellets.push(new Pellet(parent, this.x + xoff, this.y + yoff, facing == RIGHT));
					parent.groupPellets.add(parent.arrayPellets[parent.arrayPellets.length - 1]);
				}
				else*/ if (bShooting)
				{
					FlxG.play(Content.soundArrow, Content.volumeArrow, false, false, Content.nDefaultSkip);
					
					if(iDir != 0)
						bow.play("shoot" + strQual, true);
					else
						bow.play("shoot", true);
					
					bShootRecharged = false;
					
					xoff = 2;
					
					//var xoff:int = -(30 - (this.width / 2));
					
					/*
					if (!isTouching(LEFT) && !isTouching(RIGHT))
					{
						xoff += 14;
					}
					*/
					
					yoff = 12;
					
					if (fluid > 0)
						yoff = 10;
					
					
					
					if (facing == LEFT)
						xoff = 0;// -xoff;
						
					
					if (fluid > 0)
						yoff++;
					
						/*
					if (isTouching(FLOOR) && fluid == 0 && bDownButton)//&& bJumpRecharged)
					{
						Jump();
						iDir = 1;
					}
					*/
						
					if (iDir == -1)
					{
						yoff = -7;
						
						if(facing == RIGHT)
							xoff = 12 + 3 + (-5);
						else
							xoff = 0 + (5);
							
						
						//trace((parent.level.getTile(int((this.x + xoff) / 30), int((this.y - 7) / 30)) % Content.iFrontSheetWidth).toString());
							
						if (parent.level.getTile(int((this.x + xoff) / 30), int((this.y - 7) / 30)) % Content.iFrontSheetWidth >= Content.barriertile)
						{
							//trace("up in ceiling");
							yoff = 0;
						}
					}
					else if (iDir == 1)
					{
						yoff = 7;
						if(facing == RIGHT)
							xoff = 12 + 1 + (-3);
						else
							xoff = 2 + (3);
					}
					
					parent.arrayArrows.push(new Arrow(parent, this.x + xoff, this.y + yoff, facing == RIGHT, iDir));
					parent.groupArrows.add(parent.arrayArrows[parent.arrayArrows.length - 1]);
				}
				else
				{
					if (!bShootButton && !bTossButton)
					{
						bShootRecharged = true;
					}
				}
				
				if (fluid == 2 && velocity.y > 0 && Content.stats.bHasScuba == false)
					velocity.y = 0;
					
					
				var bReallyInSpikes:Boolean = false;

			
				really = parent.level.getTile(int((this.x + 3) / 30), int((this.y + 3) / 30)) % Content.iFrontSheetWidth;
				bReallyInSpikes = bReallyInSpikes || (really == Content.iSpikes || really == Content.iWaterSpikes || really == Content.iShallowSpikes);
				really = parent.level.getTile(int((this.x + this.width - 3) / 30), int((this.y + 3) / 30)) % Content.iFrontSheetWidth;
				bReallyInSpikes = bReallyInSpikes || (really == Content.iSpikes || really == Content.iWaterSpikes || really == Content.iShallowSpikes);
				really = parent.level.getTile(int((this.x + 3) / 30), int((this.y + this.height - 13) / 30)) % Content.iFrontSheetWidth;
				bReallyInSpikes = bReallyInSpikes || (really == Content.iSpikes || really == Content.iWaterSpikes || really == Content.iShallowSpikes);
				really = parent.level.getTile(int((this.x+ this.width - 3) / 30), int((this.y + this.height - 13) / 30)) % Content.iFrontSheetWidth;
				bReallyInSpikes = bReallyInSpikes || (really == Content.iSpikes || really == Content.iWaterSpikes || really == Content.iShallowSpikes);
				
				if (bReallyInSpikes)
				{
					Hit(Content.stats.iMaxHealth, 0);
				}
			}
			
			function Jump():void
			{
				FlxG.play(Content.soundJump, Content.volumeJump, false, false, Content.nDefaultSkip);
				
				bJumpCanBeCut = true;
						
				bInAir = true;
				bJumpRecharged = false;
				
				if (fluid == 2)
				{
					velocity.y = -Content.nGrav * 0.24;
				}
				else 
					velocity.y = -Content.nGrav * Content.stats.nPlayerJumpForce; // 0.68 for 3, 0.55 for 2, 0.4 for 1
			}
		}
	}
}